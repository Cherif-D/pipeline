name: Github-Docker Hub MLOps pipeline - Kamila

env:
  DOCKER_USER: ${{secrets.DOCKER_USER}}       # Docker Hub username stored as a GitHub Secret
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}} # Docker Hub password/token stored as a GitHub Secret
  REPO_NAME: ${{secrets.REPO_NAME}}           # Docker repository name stored as a GitHub Secret

# Event triggers:
# - Run on push to main
# - Run on pull_request targeting main
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  # Note: the workflow triggers on push or pull_request events to main

jobs:

  # CI job: format/lint/test application code
  ci_pipeline: 
       runs-on: ubuntu-latest
       
       steps:
        # Checkout repository with full history (fetch-depth: 0)
        - uses: actions/checkout@v1 
          with:
            fetch-depth: 0
            # This ensures complete commit history is fetched for some tools that need it

        # Set up Python 3.9 for the job environment
        - name: Set up Python 3.9
          uses: actions/setup-python@v1
          with:
            python-version: 3.9

        # Install project dependencies (and upgrade pip first)
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

        # Lint step (non-blocking): we allow warnings/errors to not fail the pipeline using --exit-zero
        - name: Lint (non bloquant)
          run: |
            pylint --disable=R,C app.py --exit-zero

        # â›” Removed the blocking Lint step to prevent CI failure on warnings
        # - name: Lint
        #   run: |
        #     pylint --disable=R,C  app.py

        # Run unit tests (verbose) on test.py
        - name: Test
          run: |
            python -m pytest -vv test.py


  # CD job: build and push Docker image to Docker Hub (runs after CI)
  cd_pipeline:
      runs-on: ubuntu-latest 
      needs: [ci_pipeline]   # Only run CD if CI completed

      steps:
      # Checkout repository sources for the CD job
      - uses: actions/checkout@v2 

      # Login to Docker Hub using credentials from GitHub Secrets
      - name: docker login
        run: | 
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
  
      # Compute a timestamp to tag the image (uses deprecated ::set-output per original file)
      - name: Get current date 
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"

      # Build Docker image and tag it with the computed date
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}

      # Push the tagged image to Docker Hub
      - name: Docker Push
        run: docker push $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}
